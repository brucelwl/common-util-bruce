package com.bruce.utils;

/**
 * Created by Administrator on 2017/7/19.
 */
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;

public class SnowflakeIdWorker {

    //protected static final Logger logger = LoggerFactory.getLogger(SnowflakeIdWorker.class);

    protected final long twepoch = 1288834974657L;

    // |--- unused[1] ---|--- timestamp[41] ---|--- worker[10] ---|--- sequence[12] ---|
    private final long workerIdBits = 10L;
    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);
    private final long sequenceBits = 12L;

    private final long workerIdShift = sequenceBits;
    private final long timestampLeftShift = sequenceBits + workerIdBits;
    private final long sequenceMask = -1L ^ (-1L << sequenceBits);

    protected long workerId = 0;

    protected long sequence = 0L;
    private long lastTimestamp = -1L;

    {
        byte[] address;
        try {
            address = InetAddress.getLocalHost().getAddress();
        } catch (UnknownHostException e) {
            address = null;
        }
        // Worker id is generated by hashing of ip address which is unique in a local network, or random if unavailable.
        if (address != null) {
            for (byte x: address) {
                workerId = ((workerId << 8) - Byte.MIN_VALUE + x) & maxWorkerId;
            }
        } else {
            //logger.warn("Cannot get ip address for generating server id, use random address instead.");
            workerId = new Random().nextLong() & maxWorkerId;
        }
        //logger.info("Worker starting. Timestamp left shift {}, worker id bits {}, sequence bits {}, worker id {}.",
        //        timestampLeftShift, workerIdBits, sequenceBits, workerId);
    }

    public synchronized long nextId() {
        long timestamp = timeGen();

        if (timestamp < lastTimestamp) {
           // logger.error("Clock is moving backwards. Rejecting requests until {}.", lastTimestamp);
            throw new RuntimeException(String.format("Clock moved backwards. Refusing to generate id for %d milliseconds",
                    lastTimestamp - timestamp));
        }

        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            if (sequence == 0) {
                timestamp = tilNextMillis(lastTimestamp);
            }
        } else {
            sequence = 0;
        }

        lastTimestamp = timestamp;
        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;
    }

    protected long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }

    protected long timeGen() {
        return System.currentTimeMillis();
    }



}